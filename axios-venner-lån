------------------------------------------------------UserConnections---------------------------------------------------

Funksjon getFriend - url: /user/{iUserId}/friend/{iFriendId}  - method GET
(hent en venn)

Send til backend:
· userId
· friendId

Send til frontend:
· friendId
· friendNickname
· friendFirstName
· friendMiddleName
· friendLastName
· FriendProfileImage

const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
console.log("", userId, sessionStorage.getItem('userId'));
axios.get('/user/'+userId+'/friend/'+friendId')
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                 setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------
Funksjon getFriends - url: /user/{iUserId}/friends - method GET
(hent alle venner)

Send til backend:
· userId

Send til frontend:
· friendId
· friendNickname
· friendFirstName
· friendMiddleName
· friendLastName
· friendProfileImage


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
console.log("", userId, sessionStorage.getItem('userId'));
axios.get('/user/'+userId+'/friends')
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                 setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon sendFriendRequest - url: /user/{iUserId}/request/{iFriendId} - method POST
(send venneforespørsel)

Send til backend:
· userId
· user2Id (Bruker som skal få venneforespørsel sin id)


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
    console.log("", userId, sessionStorage.getItem('userId'));
    axios.post('/user/'+userId+'/request/'+friendId')
        .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
      	    }
        })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon getFriendRequests - url: /user/{iUserId}/friendRequests - method GET
(alle mottatt venneforespørsler)

Send til backend:
· userId

Send til frontend:
· user2Id
· user2Nickname
· user2FirstName
· user2MiddleName
· user2LastName
· user2ProfileImage


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
console.log("", userId, sessionStorage.getItem('userId'));
axios.get('/user/’+userId+’/friendRequests')
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                 setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon replyFriendRequest -
Url: /user/{iUserId}/friendRequest/{iFriendId}/{iStatus}- method POST
(svar på venneforespørsel)

Send til backend:
· userId
· userId2 (Bruker som har sendt venneforespørsel sin id)
· status (1= godkjent, 2=avslå)


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
    console.log("", userId, sessionStorage.getItem('userId'));
    axios.post('/user/'+userId+'/friendRequest/'+friendId+'/'+status')
        .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
      	    }
        })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon deleteFriendship - url: /user/{iUserId}/friend/{iFriendId}/delete - method DELETE
(slett venn)

Send til backend:
· userId
· friendId (Venn som skal slettes sin id)


const [userId, setId] = useState(sessionStorage.getItem('userId'));
useEffect(() => {
    console.log("", userId, sessionStorage.getItem('userId'));
    axios.post('/user/'+userId+'/friend/'+friendId+'/delete')
        .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
      	    }
        })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon getUserSearch - url: /user/{iUserId}/search/{sSearch}- method GET
(søk opp bruker med søkeord)

Send til backend:
· userId
· searchString

Send til frontend:
· user2Id
· user2Nickname
· user2FirstName
· user2MiddleName
· user2LastName
· user2ProfileImage


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
console.log("", userId, sessionStorage.getItem('userId'));
axios.get('/user/’+userId+’/search/'+search')
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                 setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);


-----------------------------------------------------------Loans------------------------------------------------------------

Funksjon sendLoanRequest - url: /user/{iUserId}/asset/{iAssetId}/request- method POST
(send låneforespørsel)
Send til backend:
•	userId
•	assetId
•	startDate (ønsket av bruker) -> sendes i body
•	endDate (ønsket av bruker) -> sendes i body


const {startDate, endDate} = event.target.elements;
const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
    console.log("", userId, sessionStorage.getItem('userId'));
    axios.post('/user/'+userId+'/asset/'+assetId+'/request' , {
        startDate: startDate.value,
        endDate: startDate.value
        }).then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
      	    }
        })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon getLoanRequest - url: /user/{iUserId}/loanRequest - method GET
(hent alle mottatte låneforespørsler)
Send til backend:
•	userid

Send til frontend:
•	loanId
•	assetId
•	assetName
•	loanerFirstName
•	loanerMiddleName
•	loanerLastName
•	loanerNickname


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
console.log("", userId, sessionStorage.getItem('userId'));
axios.get('/user/’+userId+’/loanRequest)
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon getLoanRequestStatus - url: /user/{iUserId}/loanRequest/status - method GET
(få status på alle sendte låneforsespørsler)
Send til backend:
•	userId

Send til frontend:
•	loanId
•	ownerFirstName
•	ownerMiddleName
•	ownerLastName
•	ownerNickname
•	ownerProfileImage
•	assetId
•	assetName
•	assetImage
•	loanStatus


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
axios.get('/user/’+userId+’/loanRequest/status)
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon replyLoanRequest - url:/user/{iUserid}/loanRequest/{iLoanId}/{iStatus} - method POST
(svar på låneforespørsel)
Send til backend:
•	userId
•	loanId
•	status (Her tenker jeg at det holder å sende med ettall ("accepted" =1, "denied" =2))


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
axios.post('/user/'+userId+'/loanRequest/'+loanId+'/'+status')
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon getAcceptedRequests - url: /user/{iUserId}/loanAccepted - method GET
(alle godkjente forespørsler brukeren har sendt)
Send til backend:
•	userId

Send til frontend:
•	loanId
•	ownerFirstName
•	ownerMiddleName
•	ownerLastName
•	ownerNickname
•	ownerProfileImage
•	assetId
•	assetName
•	AssetImage


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
axios.get('/user/'+userId+'/loanAccepted)
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);

----------------------------------------------------------------------------------------

Funksjon getLoans - url: /user/{iUserId}/loans- method GET
(Henter alle låneforespørsler brukern har godkjent)
Send til backend:
•	userid

Send til frontend:
•	loanId
•	assetId
•	assetName
•	loanerFirstName
•	loanerMiddleName
•	loanerLastName
•	loanerNickname


const [userId, setId] = useState(sessionStorage.getItem('userId'));
const [data, setData] = useState([]);

useEffect(() => {
axios.get('/user/'+userId+'/loans)
      .then(result => {
      	    if (result.status === 200) {
      		     console.log(result.data);
                setData(result.data);
      	    }
       })
    .catch(e => console.log(e));
}, [setData, userId]);


